{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","IMP","window","console","log","init","className","type","value","onClick","e","axios","post","then","response","alert","data","get","request_pay","pg","pay_method","merchant_uid","name","product_name","amount","price","custom_data","currency","language","buyer_email","buyer_name","buyer_tel","buyer_addr","buyer_postcode","rsp","success","imp_uid","paid_amount","status","pg_provider","pg_tid","paid_at","receipt_url","apply_num","vbank_num","FormData","append","error_code","error_msg","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.32a524ae.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios'\n\nfunction App() {\n  const IMP = window.IMP; // 생략해도 괜찮습니다.\n  console.log(IMP)\n  IMP.init(\"imp81056428\"); // \"imp00000000\" 대신 발급받은 \"가맹점 식별코드\"를 사용합니다.\n  // IMP.init(\"iamport\"); // \"imp00000000\" 대신 발급받은 \"가맹점 식별코드\"를 사용합니다.\n\n  function pay(){\n    axios.get('/product')\n      .then(function(response){\n        IMP.request_pay({ // param\n          pg: \"html5_inicis\",\n          pay_method: \"card\",\n          merchant_uid: response.data.merchant_uid,\n          name: response.data.product_name,\n          amount: response.data.price,\n          custom_data: '임의데이터',\n          currency: 'KRW',\n          language: 'ko',\n          buyer_email: \"chansoo04@naver.com\",\n          buyer_name: \"이찬수\",\n          buyer_tel: \"010-3030-5139\",\n          buyer_addr: \"서울특별시 서초구 반포동\",\n          buyer_postcode: \"01181\"\n        }, rsp => { // callback\n          if (rsp.success) {\n              alert('결제 생공!')\n              console.log('imp uid: '+ rsp.imp_uid)\n              console.log('merchant_uid: ' + rsp.merchant_uid)\n              console.log('pay_method: '+ rsp.pay_method)\n              console.log('paid_amount: '+ rsp.paid_amount)\n              console.log('status: '+ rsp.status)\n              console.log('name: '+ rsp.name)\n              console.log('pg_provider: ' + rsp.pg_provider) //여기가지\n              console.log('pg_tid: ' + rsp.pg_tid)\n              console.log('buyer_name: ' + rsp.buyer_name)\n              console.log('buyer_email: ' + rsp.buyer_email)\n              console.log('buyer_tel: ' + rsp.buyer_tel)\n              console.log('buyer_addr: ' + rsp.buyer_addr)\n              console.log('buyer_postcode: ' + rsp.buyer_postcode)\n              console.log('custom_data: '+ rsp.custom_data)\n              console.log('paid_at: ' + rsp.paid_at)\n              console.log('receipt_url: ' + rsp.receipt_url)\n              console.log('apply_num: ' + rsp.apply_num)\n              console.log('vbank_num: ' + rsp.vbank_num)\n              var data = new FormData()\n              data.append('imp_uid', rsp.imp_uid)\n              data.append('merchant_uid', rsp.merchant_uid)\n              data.append('pay_method', rsp.pay_method)\n              data.append('paid_amount', rsp.paid_amount)\n              data.append('status', rsp.status)\n              data.append('name', rsp.name)\n              data.append('pg_provider', rsp.pg_provider)\n              // data.append()\n              axios.post('/payment/success', data)\n                .then(function(response){\n                  alert(response.data)\n                })\n              // ...,\n              // 결제 성공 시 로직,\n              // ...\n\n          } else {\n              alert('결제 실패!' + rsp.error_code + rsp.error_msg)\n              console.log('실패코드: ' + rsp.error_code)\n              console.log('실패 메세지: ' + rsp.error_msg)\n              console.log('imp uid: '+ rsp.imp_uid)\n              console.log('merchant_uid: ' + rsp.merchant_uid)\n              console.log('pay_method: '+ rsp.pay_method)\n              console.log('paid_amount: '+ rsp.paid_amount)\n              console.log('status: '+ rsp.status)\n              console.log('name: '+ rsp.name)\n              console.log('pg_provider: ' + rsp.pg_provider)\n              console.log('pg_tid: ' + rsp.pg_tid)\n              console.log('buyer_name: ' + rsp.buyer_name)\n              console.log('buyer_email: ' + rsp.buyer_email)\n              console.log('buyer_tel: ' + rsp.buyer_tel)\n              console.log('buyer_addr: ' + rsp.buyer_addr)\n              console.log('buyer_postcode: ' + rsp.buyer_postcode)\n              console.log('custom_data: '+ rsp.custom_data)\n              console.log('paid_at: ' + rsp.paid_at)\n              console.log('receipt_url: ' + rsp.receipt_url)\n              console.log('apply_num: ' + rsp.apply_num)\n              console.log('vbank_num: ' + rsp.vbank_num)\n              axios.post('/payment/failure')\n                .then(function(response){\n                  alert(response.data)\n                })\n              // ...,\n              // 결제 실패 시 로직,\n              // ...\n          }\n        });\n      })\n    \n  }\n\n\n  function gettoken(){\n    axios.post('/payment/success')\n      .then(function(response){\n        alert(response.data)\n      })\n  }\n\n\n  return (\n    <div className=\"App\">\n        <h1>TEST IMPORT</h1>\n        <div>\n        <input type='button' value='alert' onClick={function(e){\n          axios.post('/payment/success')\n            .then(function(response){\n              alert(response.data)\n            })\n          // alert('시발')\n        }}></input>\n        </div>\n        <div>\n        <input type='button' value='결제하기' onClick={function(e){\n          pay()\n        }}></input>\n        </div>\n        <div>\n          <input type='button' value='토큰 받기' onClick={function(e){\n            gettoken()\n          }}></input>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}